module step

!-----------------------------------------------------------------
!   This module updates the diagnostic variables and then time-
!   steps the prognostic variables.
!   Euler forward is used for the first time step, followed by
!   Adams-Bashforth 2nd order for the second time step, and
!   subsequently by Adams-Bashforth 3rd order time stepping.
!   The "traditional" HPGF horizontal discretization is used.
!-----------------------------------------------------------------

use kinds
use physical_parameters
use model_parameters
use prognostics
use momentum_tendency

implicit none
save


integer :: n3,  &                  ! index for time step n values
                                   ! i.e. previous time step
                                   
           n4                      ! index for time step n+1 values
                                   ! i.e. current time step

integer :: n3_f, n2_f, n1_f        ! index for {n, n-1, n-2} tendencies

real (kind = dbl_kind), dimension(im+1,jm) ::                        &
           u2_cov_u1             ! u2_cov interpolated to u1-points
real (kind = dbl_kind), dimension(im,jm+1) ::                        &
           u1_cov_u2             ! u1_cov interpolated to u2-points



contains


!======================================================================
! BEGINNING OF UPDATE_DIAGNOSTICS
!======================================================================

subroutine update_diagnostics ( tau, w1, w2, w3 )

!----------------------------------------------------------------------
! PURPOSE:
!   Updates diagnostic variables and calls subroutines to calculate
!   tendencies of prognostic variables in preparation for
!   time-stepping the prognostic variables.
!----------------------------------------------------------------------

implicit none

!-------------------------------------------------------------------
! INTENT IN 
!-------------------------------------------------------------------
real (kind = dbl_kind), intent(in) :: tau         ! time in hours
real (kind = dbl_kind), intent(in) :: w1, w2, w3  ! Time stepping
                                                  ! weights

!-------------------------------------------------------------------
! LOCAL
!-------------------------------------------------------------------

!
! Declare mass flux variables to be used in the "3rd-order" Takacs
! advection schemes for continuity and theta advection
!
real (kind = dbl_kind), dimension(im+1,jm) ::                        &
           F_u1                  ! Mass flux in u1-direction
                                 ! (colocated with u1-points)
real (kind = dbl_kind), dimension(im,jm+1) ::                        &
           F_u2                  ! Mass flux in u2-direction
                                 ! (colocated with u2-points)

real (kind = dbl_kind), dimension(im+1,jm) ::                        &
           sqrt_G_h_star_u1      ! Mass interpolated to u1-points
real (kind = dbl_kind), dimension(im,jm+1) ::                        &
           sqrt_G_h_star_u2      ! Mass interpolated to u2-points

real (kind = dbl_kind), dimension(im+1,jm) ::                        &
           G_cov_wt_u1_nw, G_cov_wt_u1_ne,   &  ! variables for calculating
           G_cov_wt_u1_sw, G_cov_wt_u1_se,   &  ! interpolated g_cov and g_cont
           temp_u                  ! working variable
real (kind = dbl_kind), dimension(im,jm+1) ::                        &
           G_cov_wt_u2_nw, G_cov_wt_u2_ne,   &  ! variables for calculating
           G_cov_wt_u2_sw, G_cov_wt_u2_se,   &  ! interpolated g_cov and g_cont
           temp_v                  ! working variable

real (kind = dbl_kind) :: temp1, temp2    ! working variables

integer :: i,j





! Calculate height of free surface
h_star(:,:) = sqrt_G_h_star(:,:,n4)*inv_sqrt_G_h(:,:)
h(:,:) = hs(:,:) + h_star(:,:)




! Diagnose averaged covariant velocities and the contravariant velocities


! First, calculate masses interpolated to velocity points
! Interior u1-points
do i = 2,im
   sqrt_G_h_star_u1(i,:) = p5*(sqrt_G_h_star(i,:,n4)+sqrt_G_h_star(i-1,:,n4))
end do
! Left edge
i=1
sqrt_G_h_star_u1(i,:) = p5*(sqrt_G_h_star(i,:,n4)+sqrt_G_h_star(im,:,n4))
sqrt_G_h_star_u1(im+1,:) = sqrt_G_h_star_u1(i,:)   ! Right edge
! Interior u2-points
do j = 2,jm
   sqrt_G_h_star_u2(:,j) = p5*(sqrt_G_h_star(:,j,n4)+sqrt_G_h_star(:,j-1,n4))
end do
! Bottom edge
j=1
sqrt_G_h_star_u2(:,j) = p5*(sqrt_G_h_star(:,j,n4)+sqrt_G_h_star(:,jm,n4))
sqrt_G_h_star_u2(:,jm+1) = sqrt_G_h_star_u2(:,j)   ! Top edge


! Calculate mass-weightings for interpolated covariant velocities
temp_u(:,:) = c1 / sqrt_G_h_star_u1(:,:)**0.5
! Interior u1-points
do j = 1,jm
   do i = 2,im
      G_cov_wt_u1_nw(i,j) = temp_u(i,j) * sqrt_G_h_star_u2(i-1,j+1)**0.5
      G_cov_wt_u1_ne(i,j) = temp_u(i,j) * sqrt_G_h_star_u2(i,j+1)**0.5
      G_cov_wt_u1_sw(i,j) = temp_u(i,j) * sqrt_G_h_star_u2(i-1,j)**0.5
      G_cov_wt_u1_se(i,j) = temp_u(i,j) * sqrt_G_h_star_u2(i,j)**0.5
   end do
   ! Left edge
   i=1
   G_cov_wt_u1_nw(i,j) = temp_u(i,j) * sqrt_G_h_star_u2(im,j+1)**0.5
   G_cov_wt_u1_ne(i,j) = temp_u(i,j) * sqrt_G_h_star_u2(i,j+1)**0.5
   G_cov_wt_u1_sw(i,j) = temp_u(i,j) * sqrt_G_h_star_u2(im,j)**0.5
   G_cov_wt_u1_se(i,j) = temp_u(i,j) * sqrt_G_h_star_u2(i,j)**0.5
   ! Right Edge
   G_cov_wt_u1_nw(im+1,j) = G_cov_wt_u1_nw(i,j)
   G_cov_wt_u1_ne(im+1,j) = G_cov_wt_u1_ne(i,j)
   G_cov_wt_u1_sw(im+1,j) = G_cov_wt_u1_sw(i,j)
   G_cov_wt_u1_se(im+1,j) = G_cov_wt_u1_se(i,j)
end do
temp_v(:,:) = c1 / sqrt_G_h_star_u2(:,:)**0.5
! Interior u2-points
do i = 1,im
   do j = 2,jm
      G_cov_wt_u2_nw(i,j) = temp_v(i,j) * sqrt_G_h_star_u1(i,j)**0.5
      G_cov_wt_u2_ne(i,j) = temp_v(i,j) * sqrt_G_h_star_u1(i+1,j)**0.5
      G_cov_wt_u2_sw(i,j) = temp_v(i,j) * sqrt_G_h_star_u1(i,j-1)**0.5
      G_cov_wt_u2_se(i,j) = temp_v(i,j) * sqrt_G_h_star_u1(i+1,j-1)**0.5
   end do
   ! Bottom edge
   j=1
   G_cov_wt_u2_nw(i,j) = temp_v(i,j) * sqrt_G_h_star_u1(i,j)**0.5
   G_cov_wt_u2_ne(i,j) = temp_v(i,j) * sqrt_G_h_star_u1(i+1,j)**0.5
   G_cov_wt_u2_sw(i,j) = temp_v(i,j) * sqrt_G_h_star_u1(i,jm)**0.5
   G_cov_wt_u2_se(i,j) = temp_v(i,j) * sqrt_G_h_star_u1(i+1,jm)**0.5   
   ! Top edge
   G_cov_wt_u2_nw(i,jm+1) = G_cov_wt_u2_nw(i,j)
   G_cov_wt_u2_ne(i,jm+1) = G_cov_wt_u2_ne(i,j)
   G_cov_wt_u2_sw(i,jm+1) = G_cov_wt_u2_sw(i,j)
   G_cov_wt_u2_se(i,jm+1) = G_cov_wt_u2_se(i,j)
end do


! Calculate interpolated covariant velocities -- used to diagnose u,v in output module
! Interior u1-points
do j = 1,jm
   do i = 2,im
      u2_cov_u1(i,j) = p25 * ( G_cov_wt_u1_nw(i,j)*u2_cov(i-1,j+1,n4) + &
                         G_cov_wt_u1_ne(i,j)*u2_cov(i,j+1,n4) +         &
                         G_cov_wt_u1_sw(i,j)*u2_cov(i-1,j,n4) +         &
                         G_cov_wt_u1_se(i,j)*u2_cov(i,j,n4) )
   end do
   ! Left edge
   i=1
   u2_cov_u1(i,j) = p5 * ( G_cov_wt_u1_ne(i,j)*u2_cov(i,j+1,n4) +       &
                           G_cov_wt_u1_se(i,j)*u2_cov(i,j,n4) )
   ! Right edge
   i=im+1
   u2_cov_u1(i,j) = p5 * ( G_cov_wt_u1_nw(i,j)*u2_cov(i-1,j+1,n4) +     &
                         G_cov_wt_u1_sw(i,j)*u2_cov(i-1,j,n4) )
end do
! Interior u2-points
do i = 1,im
   do j = 2,jm
      u1_cov_u2(i,j) = p25 * ( G_cov_wt_u2_nw(i,j)*u1_cov(i,j,n4) +     &
                         G_cov_wt_u2_ne(i,j)*u1_cov(i+1,j,n4) +         &
                         G_cov_wt_u2_sw(i,j)*u1_cov(i,j-1,n4) +         &
                         G_cov_wt_u2_se(i,j)*u1_cov(i+1,j-1,n4) )
   end do
   ! Bottom edge
   j=1
   u1_cov_u2(i,j) = p5 * ( G_cov_wt_u2_nw(i,j)*u1_cov(i,j,n4) +         &
                         G_cov_wt_u2_ne(i,j)*u1_cov(i+1,j,n4) )
   ! Top edge
   j=jm+1
   u1_cov_u2(i,j) = p5 * ( G_cov_wt_u2_sw(i,j)*u1_cov(i,j-1,n4) +      &
                         G_cov_wt_u2_se(i,j)*u1_cov(i+1,j-1,n4) )
end do


! Calculate contravariant velocities

! u1_cont
! Bottom row -- 2nd-order, non-energy-conserving
j = 1
! Non-left/right edges
do i = 2,im
   u1_cont(i,j) = G_cont_11_u1(i,j)*u1_cov(i,j,n4) + G_cont_12_u1(i,j) *   &
      p25 * ( u2_cov(i-1,j+1,n4) + u2_cov(i,j+1,n4) + u2_cov(i-1,j,n4) +   &
              u2_cov(i,j,n4) )
end do
! Interior u1-points -- 2nd-order, energy-conserving
do j = 2,jm-1
   do i = 2,im
      u1_cont(i,j) = G_cont_11_u1(i,j)*u1_cov(i,j,n4) + p25 * (            &
       mean_G_cont_12_u1_nw(i,j)*G_cov_wt_u1_nw(i,j)*u2_cov(i-1,j+1,n4) +  &
       mean_G_cont_12_u1_ne(i,j)*G_cov_wt_u1_ne(i,j)*u2_cov(i,j+1,n4) +    &
       mean_G_cont_12_u1_sw(i,j)*G_cov_wt_u1_sw(i,j)*u2_cov(i-1,j,n4) +    &
       mean_G_cont_12_u1_se(i,j)*G_cov_wt_u1_se(i,j)*u2_cov(i,j,n4) )
   end do
end do
! Top row -- 2nd-order, non-energy-conserving
j = jm
! Non-left/right edges
do i = 2,im
   u1_cont(i,j) = G_cont_11_u1(i,j)*u1_cov(i,j,n4) + G_cont_12_u1(i,j) *   &
      p25 * ( u2_cov(i-1,j+1,n4) + u2_cov(i,j+1,n4) + u2_cov(i-1,j,n4) +   &
              u2_cov(i,j,n4) )
end do
! Left/right edges
do j = 1, jm
   ! Left edge
   i = 1
   ! Calculate 2nd-order accurate interpolation of u2_cov
   temp1 = p75 * ( u2_cov(i,j,n4) + u2_cov(i,j+1,n4) ) -                   &
           p25 * ( u2_cov(i+1,j,n4) + u2_cov(i+1,j+1,n4) )
   temp2 = p75 * ( u2_cov(im,j,n4) + u2_cov(im,j+1,n4) ) -                 &
           p25 * ( u2_cov(im-1,j,n4) + u2_cov(im-1,j+1,n4) )
   u1_cont(i,j) = p5*( G_cont_11_u1(i,j)*u1_cov(i,j,n4) +                  &
                       G_cont_11_u1(im+1,j)*u1_cov(im+1,j,n4) ) +          &
               p5*( G_cont_12_u1(i,j)*temp1 + G_cont_12_u1(im+1,j)*temp2 )
   ! Right edge
   u1_cont(im+1,j) = u1_cont(i,j)
end do

! u2_cont
! Left column -- 2nd-order, non-energy-conserving
i = 1
! Non-bottom/top edges
do j = 2,jm
   u2_cont(i,j) = G_cont_22_u2(i,j)*u2_cov(i,j,n4) + G_cont_12_u2(i,j) *   &
      p25 * ( u1_cov(i+1,j-1,n4) + u1_cov(i+1,j,n4) + u1_cov(i,j-1,n4) +   &
              u1_cov(i,j,n4) )
end do
! Interior u2-points -- 2nd-order, energy-conserving
do j = 2,jm
   do i = 2,im-1
      u2_cont(i,j) = G_cont_22_u2(i,j)*u2_cov(i,j,n4) + p25 * (            &
       mean_G_cont_12_u2_nw(i,j)*G_cov_wt_u2_nw(i,j)*u1_cov(i,j,n4) +      &
       mean_G_cont_12_u2_ne(i,j)*G_cov_wt_u2_ne(i,j)*u1_cov(i+1,j,n4) +    &
       mean_G_cont_12_u2_sw(i,j)*G_cov_wt_u2_sw(i,j)*u1_cov(i,j-1,n4) +    &
       mean_G_cont_12_u2_se(i,j)*G_cov_wt_u2_se(i,j)*u1_cov(i+1,j-1,n4) )
   end do
end do
! Right columns -- 2nd-order, non-energy-conserving
i = im
! Non-bottom/top edges
do j = 2,jm
   u2_cont(i,j) = G_cont_22_u2(i,j)*u2_cov(i,j,n4) + G_cont_12_u2(i,j) *   &
      p25 * ( u1_cov(i+1,j-1,n4) + u1_cov(i+1,j,n4) + u1_cov(i,j-1,n4) +   &
              u1_cov(i,j,n4) )
end do
! Bottom/top edges
do i = 1, im
   ! Bottom edge
   j = 1
   ! Calculate 2nd-order accurate interpolation of u1_cov
   temp1 = p75 * ( u1_cov(i,j,n4) + u1_cov(i+1,j,n4) ) -                   &
           p25 * ( u1_cov(i,j+1,n4) + u1_cov(i+1,j+1,n4) )
   temp2 = p75 * ( u1_cov(i,jm,n4) + u1_cov(i+1,jm,n4) ) -                 &
           p25 * ( u1_cov(i,jm-1,n4) + u1_cov(i+1,jm-1,n4) )
   u2_cont(i,j) = p5*( G_cont_22_u2(i,j)*u2_cov(i,j,n4) +                  &
                       G_cont_22_u2(i,jm+1)*u2_cov(i,jm+1,n4) ) +          &
               p5*( G_cont_12_u2(i,j)*temp1 + G_cont_12_u2(i,jm+1)*temp2 )
   ! Top edge
   u2_cont(i,jm+1) = u2_cont(i,j)
end do



!
! Get tendency of prognostic mass variable sqrt_G_h_star
!
F_u1(:,:) = u1_cont(:,:)*sqrt_G_h_star_u1(:,:)
F_u2(:,:) = u2_cont(:,:)*sqrt_G_h_star_u2(:,:)
! Interior points
do j = 1,jm
   do i = 1,im
      sqrt_G_h_star_f(i,j,n3_f) =  - invdx1*(F_u1(i+1,j)-F_u1(i,j)) -   &
                                     invdx2*(F_u2(i,j+1)-F_u2(i,j))
   end do
end do


!
! Get tendencies of prognostic variables u1_cov and u2_cov
!
call get_u1covf_u2covf ( u1_cov(:,:,n4),u2_cov(:,:,n4),u1_cont,u2_cont,    &
                         F_u1,F_u2,h,h_star(:,:),sqrt_G_h_star(:,:,n4),    &
                         pv,zeta,ke_horiz,                                 &
                         u1_cov_f(:,:,n3_f),u2_cov_f(:,:,n3_f) )





end subroutine update_diagnostics

!======================================================================
! END OF UPDATE_DIAGNOSTICS
!======================================================================




!======================================================================
! BEGINNING OF STEP_DYNAMICS
!======================================================================

subroutine step_dynamics ( step_count, w1, w2, w3 )

!----------------------------------------------------------------------
! PURPOSE:
!   Performs the dynamics time stepping using the Adams-Bashworth 3rd.
!   order scheme.
!----------------------------------------------------------------------

implicit none

!-------------------------------------------------------------------
! INTENT IN 
!-------------------------------------------------------------------
integer (kind = int_kind), intent(in) :: step_count

real (kind = dbl_kind), intent(in) :: w1, w2, w3  ! Time stepping
                                                  ! weights




! Advance prognostic time step indices
n4 = mod(step_count+1,2) + 1
n3 = mod(step_count,2) + 1


! Step prognostic variables
u1_cov(:,:,n4) = u1_cov(:,:,n3) + dt *                               &
               ( w3*u1_cov_f(:,:,n3_f) + w2*u1_cov_f(:,:,n2_f) +     &
                 w1*u1_cov_f(:,:,n1_f) )

u2_cov(:,:,n4) = u2_cov(:,:,n3) + dt *                               &
               ( w3*u2_cov_f(:,:,n3_f) + w2*u2_cov_f(:,:,n2_f) +     &
                 w1*u2_cov_f(:,:,n1_f) )

sqrt_G_h_star(:,:,n4) = sqrt_G_h_star(:,:,n3) + dt *                 &
    ( w3*sqrt_G_h_star_f(:,:,n3_f) +                                 &
      w2*sqrt_G_h_star_f(:,:,n2_f) + w1*sqrt_G_h_star_f(:,:,n1_f) )



! Advance tendency time step indices
n3_f = mod(step_count+2,3) + 1
n2_f = mod(step_count+1,3) + 1
n1_f = mod(step_count,3) + 1


end subroutine step_dynamics

!======================================================================
! END OF STEP_DYNAMICS
!======================================================================




end module step
